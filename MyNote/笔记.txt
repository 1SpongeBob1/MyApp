2020-07-16
	1、控件高度设置"0px"并添加顶部和底部约束后空间会自适应高度


2020-07-21
	1、什么是匿名内部类
	2、lambda表达式
	3、数据存储及持久化
	4、http连接、okhttp库
		okHttp3会默认使用密文传输，当使用http（明文传输）时会自动报错，所以要用https；
		或者手动修改配置使okHttp3允许明文传输。（https://blog.csdn.net/AlexYoung28/article/details/82728946）
	5、kotlin中is、！is、as、as？的意义
	
	
2020-07-21
	1、fragment的onCreateView创建view并将返回的view添加到指定activity中。onViewCreated会在之后马上执行。所以activity级的对
		fragment的调用应该放在onViewCreated，因为onCreateView执行的时候布局还未放置在相关activity中，activity找不到相关布局。
		
		
2020-07-27
	1、函数式编程：函数式编程是编程范式的一种，最常见的编程范式是命令式编程，如面向过程、面向对象编程。函数式编程里，一切
		都是数学函数。函数式编程语言也可以有对象，但是这些对象是不可变的--要么是函数参数要么是返回值。函数式编程里没有for
		循环，而是通过递归，把函数当成参数传递的方式进行循环效果。（Java 8开始支持函数式编程，通过lambda表达式实现）
		
		特点：一切皆函数，一切数据皆不可变，一切计算都是函数作用在不可变数据上产生新的不可变数据的过程。
		
		a、lambda表达式：对特定接口的匿名实现类语法的简写
		b、函数式接口：接口中只有一个抽象方法的接口。由于java中Object是任意类或接口的父类，所以该抽象方法的签名不能与Object中
					的方法一样，接口中可以有非抽象方法。可以在接口上加@FunctionalInterface注解，编译器会自动检查接口是否符
					合函数式接口的规范。
		c、方法引用：若lanbda表达式只是调用某个方法，则可以写成方法引用。
			方法引用语法：
				静态方法引用：ClassName::methodName
				实例上的实例方法引用：instanceReference::methodName
				父类的实例方法引用：super::methodName
				类型上的实例方法引用：ClassName::methodName
				构造方法引用：Class::new
				数组构造方法引用：TypeName[]::new
				
	2、fragment的生命周期
		a、fragment的状态和回调：每一个Activity在其生命周期内都可能会有四种状态：运行、暂停、停止、销毁。fragment也与之类似。
			运行状态：当一个fragment所关联的activity正处于运行状态时，该fragment也会处于运行状态。
			暂停状态：当一个activity处于暂停状态时，与之关联的fragment也会暂停。
			停止状态：当一个activity停止时，与之关联的fragment就会停止，或者通过FragmentTransaction的remove(),replace()方法将
						fragment从activity中移除，但在事务提交之前调用了addToBackStack()方法，这时fragment也会被停止。总的来说，
						进入停止状态的fragment对用户不可见，且可能被系统回收。
			销毁状态：fragment依赖于activity而存在，所以当activity被销毁时，fragment也会被销毁。或者可以通过FragmentTransaction
						的remove(),replace()方法将fragment从activity中移除，但在事务提交之前没有调用addToBackStack()方法，
						这时fragment也会进入销毁状态。
						
	3、Activity的生命周期
		运行状态：activity位于返回栈的栈顶。（系统最不愿回收，会影响用户体验）
		暂停状态：activity不在处于栈顶但依然可见。（系统也不愿回收，只有在内存极低的情况下才会被考虑回收）
		停止状态；activity不处于栈顶且完全不可见。（有可能会被系统回收）
		销毁状态：activity从返回栈中移除。（系统最倾向回收哦，以保证手机内存充足）
		
		生存期回调：
			onCreate()：activity第一次被创建时调用。在这个方法中完成初始化操作，如加载布局、绑定事件等。
			onStart()：当activity由不可见变为可见时调用。
			onResume()：当activity准备和用户交互时调用，此时activity一定位于返回栈栈顶且处于运行状态。
			onPause()：当系统准备去启动或恢复另一个activity时调用。通常在这个方法里释放一些消耗CPU资源的内存，并保存一些关键数据。
			onStop()：当activity完全不可见时调用。它和onPause()的区别主要在于：当启动的新activity是一个对话式的activity时，会执行
						onPause()而不是onStop()。
			onDestroy()：当activity被销毁之前调用，之后activity处于销毁状态。
			onRestart()：当activity由停止状态变为运行状态时调用，即重启activity。
			
		可分为三种生存期：
			完整生存期：activity在onCreate()和onDestroy()之间所经历的就是完整生存期。对activity进行加载时的各种初始化操作和销毁前
						的内存释放操作。
			可见生存期：activity在onStart()和onStop()之间所经历的就是可见生存期。此时activity总是对用户可见，但不一定能交互。可以
						管理那些对用户可见的资源的加载和释放。保证停止状态不会占用过多内存。
			前台生存期：activity在onResume()和onPause()之间所经历的就是前台生存期。在前台生存期，activity总是处于运行状态。
			
	4、finish()、onDestroy()和System.exit()的区别
		finish()：只是将activity移出栈，但并没有及时调用onDestroy()方法，占用的资源也未及时释放。会由系统决定何时释放资源，当内存紧缺时
					按优先级释放。
		onDestroy()：系统销毁此activity在内存中的实例，再次进入此activity时，必须重新创建，执行onCreate()。
		System.exit(0)：系统针对整个application，将进程杀掉。
		
		finish()用于结束一个activity的生命周期。而onDestroy()是生命周期的一个方法，作用是在一个activity被销毁之前，释放之前此
				activity所占用的资源。onDestroy()是一个activity生命周期的最后一步，会回收资源空间。finish()也会调用到onDestroy()。
				
	5、方法签名：方法签名由方法名称和参数列表组成（参数的类型和顺序）。
		
		
2020-07-28
	1、Android有关布局的单位大部分是dp，代码中的单位大部分是px。
	
	
2020-07-29
	1、关于之前git无法拉去远程分支
		要先在github的设置里将本地ssh key添加进去，这样此电脑才能访问指定的github。
	2、本地代码提交不成功问题：远程分支有ReadMe文档本地没有，所以push不成功。可以使用pull -rebase，可以将远程的内容合并到本地
		仓库（pull = fetch + merge）。
		
		
2020-07-30		
	1、ViewModel：将数据存入viewmodel，可保证在切换activity时保留数据，在activity下次展示时恢复数据。
	2、EventBus：a、不应该在onCreated里面注册，EventBus是用来做Activity之间的通信的，当一个Activity还未生成或者未在栈中时，是收发不了消息的。
				b、EventBus也不应该在onStop中注销，因为此时Activity还在栈中，只是未显示出来，如果注销的话将收不到信息。应该在onDestroy中注销。
				c、onEvent()方法里面接受的post过来的参数类型应该是一个对象。（如：int不行，Integer可以）
				d、在注册消息的时候要给监听的对象赋初值，以免如网络请求等出问题拿不到数据的时候出现应用之类的情况。
				
				
2020-08-02
线程相关：
	1、synchronized：关键字，是一种同步锁。
					修饰一个代码块：被修饰的代码块称为同步代码块，作用范围是{}括起来的代码，对象是调用这个代码块的对象。
					修饰一个方法：被修饰的方法成为同步方法，作用范围是整个方法，对象是调用这个方法的对象。
					修饰一个静态方法：范围是整个静态方法，作用对象是这个类的所有对象。
					修饰一个类：作用范围是synchronized后面括号括起来的部分，作用对象是这个类的所有对象。
	
	
2020-08-03
线程相关：
	1、并发与并行：	并行是指多个cpu实例或者多台机器同时处理一段逻辑，是真正的同时。
					并发是指通过cpu调度算法，使用户看上去好像同时执行，但实际上在cpu层面并不是同时的。并发往往在使用场景中有公共资源，对于这个公共
						资源的使用往往会产生瓶颈。我们会用TPS或者QPS来反映系统的处理能力。
	2、线程安全：指在并发的情况下，该代码经过多线程调用，线程的调用顺序并不会影响结果。反之线程不安全即调用顺序会影响结果。
	3、同步：java中的同步指通过人为的控制和调度，保证共享资源的多线程访问是线程安全的，来保证结果的准确性。线程安全的优先级高于性能。
	4、线程在Running的过程中可能遇到的阻塞（Blocked）情况：		(https://juejin.im/entry/6844903431870611464)
			a、调用join()或者sleep()方法，会进入阻塞状态。当sleep()结束或者join()中断或者I/O完成时会再次进入Runnable状态，等待JVM调用。
			b、调用wait()方法，使该线程处于等待池（wait blocked pool）中，直到notify()/notifyAll()，线程被唤醒被放到锁定池（lock blocked pool），
					释放同步锁使线程回到可运行状态（Runnable）。
			c、对Running状态的线程加同步锁（synchronized）使其进入锁定池（lock blocked pool），同步锁被释放时进入可执行状态（Runnable）。
			
			此外，Runnable状态的线程是处于被调度的线程，此时的调度顺序是不一定的。Thread类中的yield()方法可以让一个Running状态的线程转为Runnable。
			
			new --( start() )--> Runnable --(获取cpu)--> Running --(run()结束或者异常退出)--> dead	
	
	5、synchronized、wait、notify是任何对象都有的同步工具。
	6、monitor：java中每个对象都有一个监视器，来检测并发代码的重入。在非多线程编码时该监视器不应发挥作用。若是在synchronized范围内，监视器发挥作用。
				wait、notify必须存在于synchronized块中，并且，这三个关键字针对的是同一监视器（某个对象的监视器）。所以wait之后，其他线程可以进入同
				步块执行。当某代码块不持有监视器的使用权时，去调用wait或者notify会抛出IllegalMonitorStateException。在synchronized里面调用其他对象的
				监视器时，因为监视器的不同也会抛出此异常。
				
				synchronized单独使用：
						代码块：多线程编程中，synchronized(){}中的方法获取了括号中的对象实例的monitor，如果实例相同，那么只有一个线程能够执行该块内容。、
						直接作用于方法：获取的是当前类的monitor，如果修饰的是静态方法，则锁定该类所有的实例。
	7、volatile：多线程的内存模型：main memory（主存），working memory（线程栈）。在处理数据时，线程会把值从主存中load到本地栈。完成操作后再save回去。
				volatile关键字的作用即每次针对该变量的操作都会触发一次load and save。
				针对多线程编程的变量要尽量使用final/volatile。本质上volatile就是不去缓存，直接取值。在线程安全的情况下会牺牲性能。
				
	8、基本线程类：	Thread类、Runnable接口、Callable接口。
					Thread类相关方法：	public static Thread.yield()	//当前线程转让cpu控制权，让其他就绪状态的线程运行。
										public static Thread.sleep()	//暂停一段时间
										public join()	//在一个线程中调用另一个线程t的join方法，会让此线程t执行完毕后再执行当前线程。
										public interrupt()	//中断一个线程，sleep和join皆可被打断。
					
					关于中断：	不会像stop()一样中断一个正在运行的线程。线程会时不时检测中断标识位，以判断线程是否需要被打断（中断值是否为true）。中断只会
								影响到wait状态、sleep状态和join状态。被打断的线程会抛出InterruptedException。Thread.interrupted()检查当前线程是否发生中断
								（返回boolean）。synchronized在获取锁的过程中不可被中断。
								中断是一个状态，interrupt方法只是将值设为true。正常运行的程序不去检测状态，就不会终止。而wait等阻塞方法会去检测并抛出异常。
								如果在正常运行的程序中添加while( !Thread.interrupted() )，则同样可以检测中断程序并退出代码块。
								
								
2020-08-07
	1、在对一个List迭代的时候如果同时对其进行修改，会抛出java.util.ConcurrentModificationException。因为AbstractList中有一个迭代器的实现。AbstractList中有
			一个modCount的成员变量，当我们进行add或者remove操作时，modCount便会+1。迭代器中还有三个成员变量：expectedModCount，表示对List修改次数的期望值，
			初始为modCount。cursor：表示下一个要访问的元素的索引。lastRet：表示上一个访问的元素的索引。迭代器通过hasNext()方法判断cursor是否等于List的长度
			来判断是否还有元素未访问。迭代器每次next()操作时，都会把cursor的值赋给lastRet，然后cursor++。而List的add或者remove方法会对modCount加一然后修改
			List的长度。在进行一次操作后expectedModCount还是初始的modCount值而modCount已经改变。迭代器的next()方法最开始会有一个方法checkForComodification()
			用来判断modCount与expectedModCount是否相等。不相等就会抛出ConcurrentModificationException异常。(https://www.cnblogs.com/dolphin0520/p/3933551.html)
			
	2、final：	修饰类：类无法被继承。类中所有成员方法会被隐式的指定为final。
				修饰方法：方法无法被继承，在早期java版本会将final方法转为内嵌调用提高效率，但方法过于庞大时无法带来明显提升。在最近的java版本中，已经不需要final方法
						来优化。因此，只有在明确禁止子类覆盖此方法是才会使用。private修饰的方法会隐式的指定为final。
				修饰变量：如果是基本类型，此变量无法被修改；如果是引用类型，此变量无法再指向其他对象。
				
	3、String toString() String.valueOf()
	

2020-08-14
	1、AS ：clean清理的是项目缓存，invalidate cache清理的是编辑器缓存。
	
	
2020-08-31
	1、okhttp中response.body().string()只能使用一次，用完后会关闭response流，再操作需要再次请求。
	
	
	
